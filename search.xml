<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>小小感动</title>
      <link href="/2022/05/20/%E5%B0%8F%E5%B0%8F%E6%84%9F%E5%8A%A8/"/>
      <url>/2022/05/20/%E5%B0%8F%E5%B0%8F%E6%84%9F%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>事情要从昨晚说起~</p><p>本来预约的第二天的三面，被临时通知推迟到下周了</p><p>紧绷了几天的精神，忽然就松弛了~</p><p>又是没有通知、没有offer的一天</p><p>然后，就，忘记了开组会这件事</p><p>老师打电话，找同学联系，都找不到我</p><p>晚上和老师解释说去操场和朋友跑步了，有点emo</p><p>老师劝我说要放轻松，可是我好像不太擅长和导师微信文字聊天的状态</p><p>草草结束对话，便去休息了~</p><hr><p>今天下午开会讨论项目工作</p><p>讨论结束以后，老师让我单独留在线上会议室</p><p>一开始有点害怕，还以为要批评我昨天没有开组会</p><p>可是没有批评~</p><p>老师说</p><p>有的花春天开，有的花在夏天开，花开各有时，还有的四季常青呢~</p><p>老师说</p><p>上一届的师姐们找实习的时候也很艰难，代码能力不太好</p><p>最后不仅去了好的公司，甚至都解决了户口问题</p><p>老师说</p><p>找工作这件事啊，要战略上藐视它，战术上重视它</p><p>自己还是要继续积极去面对、好好准备的</p><p>老师说</p><p>把自己最近做的项目啊，之前的胶囊网络什么的</p><p>都要搞搞明白</p><p>自己要能讲清楚，要让别人发现你的闪光点</p><p>老师还说</p><p>如果有什么不会的，有什么问题的话，随时可以找老师聊聊的</p><hr><p>看动漫的时候，有见到过一个词，叫做「言灵」</p><p>意思是说，言灵的语言是有力量的，可以像武器一样去使用</p><p>我相信语言是有力量的！</p><p>当然，它没有「言灵」那么玄乎啦~</p><hr><p>老师在温柔、委婉地讲着那些鼓励我的话的时候</p><p>我感觉自己眼睛里的泪珠，马上就要掉下来了</p><p>那种感动，</p><p>仿佛是冬天冻得冰凉凉毫无知觉的一双手</p><p>被一盆温暖的水给慢慢融化开的感觉</p><hr><p>良言一句三冬暖~</p><p>入学以来，很多时候觉得大家都只顾自己的事情</p><p>利己，才是理所当然的事情嘛</p><p>别人的事，别人的心情，哪里能放在自己的心上呢</p><p>老师每天好多事，那么忙</p><p>还愿意花时间来鼓励我这件事</p><p>那我感觉自己，</p><p>今天、接下来几天</p><p>应该都会有好心情</p><p>也有勇气继续努力了！</p><p>加油！</p>]]></content>
      
      
      <categories>
          
          <category> 生活小感悟 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>异或、同或运算</title>
      <link href="/2022/05/16/%E5%BC%82%E6%88%96%E3%80%81%E5%90%8C%E6%88%96%E8%BF%90%E7%AE%97/"/>
      <url>/2022/05/16/%E5%BC%82%E6%88%96%E3%80%81%E5%90%8C%E6%88%96%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="壹异或运算">壹、异或运算</h2><ol type="1"><li>符号：⊕、XOR、EOR、EX-OR</li><li>规则：同为0，异为1</li><li>公式：a ⊕ b = (¬a ∧ b) ∨ (a ∧¬b)</li><li>举例：<ol type="1"><li>同为0：0 ⊕ 0 = 1 ⊕ 1 = 0</li><li>异为1：0 ⊕ 1 = 1 ⊕ 0 = 1</li></ol></li></ol><h2 id="贰同或运算">贰、同或运算</h2><ol type="1"><li>符号： ⊙</li><li>规则：同为1，异为0</li><li>公式：a ⊙ b = ab + ¬a¬b</li><li>举例：<ol type="1"><li>同为1：0 ⊕ 0 = 1 ⊕ 1 = 1</li><li>异为0：0 ⊕ 1 = 1 ⊕ 0 = 0</li></ol></li></ol><hr><blockquote><p>几个逻辑符号介绍：</p><ol type="1"><li>与∧：a ∧ b，a和b都为真，结果为真；否则结果为假。</li><li>或∨：a ∨ b，a和b都为假，结果为假；否则结果为真。</li><li>非¬：¬a，若a为真，结果为假；若a为假，结果为真。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 知识积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节面试的问题准备</title>
      <link href="/2022/05/14/%E5%AD%97%E8%8A%82%E9%9D%A2%E8%AF%95%E7%9A%84%E9%97%AE%E9%A2%98%E5%87%86%E5%A4%87/"/>
      <url>/2022/05/14/%E5%AD%97%E8%8A%82%E9%9D%A2%E8%AF%95%E7%9A%84%E9%97%AE%E9%A2%98%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<p>大早上睡不着的时候翻<a href="https://www.nowcoder.com/">牛客</a>搜字节三面，总结出来的各种问题。牛客yyds！！！</p><p><strong>这篇博客没有答案、只有问题</strong></p><p>答案我估计还得查几天，再慢慢总结吧~</p><h2 id="壹c数据结构相关">壹、C++、数据结构相关</h2><ol type="1"><li>归并排序的思路，时间复杂度，空间复杂度，是否是稳定的排序算法？<ol type="1"><li><a href="https://www.runoob.com/w3cnote/ten-sorting-algorithm.html">十大经典排序算法</a></li><li>堆排序</li><li>多路归并</li><li>用过哪些，各自在什么情况下使用</li></ol></li><li>讲一下hashmap<ol type="1"><li>原理</li><li>怎么扩容的，为什么8转换为树，为什么负载因子是0.75</li><li>新建的hashmap初始默认大小是多少</li><li>为什么尾插法能解决死循环</li><li>并发安全的hashmap有那些</li><li>如果我要存两个对象，假设是一个STU类，他们内部所有的值都是相同的，但是他们就不是两个相同的对象，这时候map会判定他们到同一个桶内吗？</li><li>如果我非要存两个STU对象，而且我非要不设置id，那你能怎么办呢？</li><li>实现len(keys) &gt; 1e9 的情况下的 HashMap</li></ol></li><li>arraylist和linkedlist的区别</li><li>hashSet和treeSet区别</li><li>写一个单例</li><li>为什么用volatile，为什么要用synchronized，重排序发生在哪一步<ol type="1"><li>dcl为什么用volatile</li><li>volatile具体的作用和实现原理</li></ol></li><li>synchronize的原理？lock和synchronized的区别</li><li>C++中auto关键字实现原理</li><li>说说对模板元编程的理解</li><li>常见算法的时间复杂度</li><li><a href="https://doubleyue.life/2022/05/16/异或、同或运算/">异或、同或运算</a></li><li>多态<ol type="1"><li>你是怎么理解的</li><li>虚函数是什么，什么时候用</li><li>虚函数的底层实现原理、虚函数表存储了什么</li><li>写个多态吧</li><li>纯虚函数</li><li>为什么析构函数是虚函数？</li></ol></li><li>说说链接器在链接过程都做了什么</li><li>空类大小？有虚函数的类的大小？</li><li>设计模式<ol type="1"><li>单例：饿汉模式、懒汉模式<ol type="1"><li>写一个单例模式，并且运行程序证明你的单例模式确实是单例的</li></ol></li><li>工厂</li><li>建造者模式</li><li>代理模式</li></ol></li><li>c语言实现memcpy</li><li>C++怎么计算每个班学生的平均成绩，输出班级和平均成绩管理线程池<ol type="1"><li>多线程的好处？怎么管理多线程中线程数量</li></ol></li><li>C++socket网络编程了解吗</li><li>C++如何实现垃圾回收</li><li>C++的内存管理-Heap,Stack, new, delete</li><li>智能指针<ol type="1"><li>share_ptr 的优化原理</li><li>shared、weak、unique</li><li>实现原理</li><li>引用计数器</li></ol></li><li>C++怎么管理内存</li><li>smart_ptr, deleter、实现机制核引用计数存在什么问题？</li><li>析构过程</li><li>递归的处理过程</li><li>常用算法对比<ol type="1"><li>DP</li><li>回溯</li><li>贪心</li><li>分支限界</li></ol></li><li>数组和链表的区别</li><li>哈希映射<ol type="1"><li>原理</li><li>哈希冲突</li><li>拉链法和开放定址法哪种好</li><li>哈希是否是线程安全的</li><li>当哈希表比较多时，加锁效率不高那如何改进性能</li></ol></li><li>volatile具体功能怎么实现的(要讲到cpu的mesi，总线嗅探，storebuffer，lock指令等)</li><li>C++和java的区别</li><li>对 STL 库的理解和实现原理以及思想<ol type="1"><li>STL 中 hash 表实现的 map 是什么 ? 答 unorderedmap</li><li>问了 hash 表的优缺点, 又问如果hash 冲突过大怎么优化，答：转为红黑树以及如何转</li><li>用 C++ 手写设计HashMap，然后我就按 C++ map 的设计写，期间问了一下为什么这么设计, 最后突然问我 Hash 表的实现呢?</li></ol></li><li>C++的map容器，有哪几种？<ol type="1"><li>map - 红黑树</li><li>multimap</li><li>unordered_map - hash</li><li>map实现原理</li></ol></li><li>二叉平衡树，讲了Treap 和 Splay 的原理</li><li>线段树</li><li>C++ 的优化方式：右值引用、模板根据条件进行代码编译、 inline等</li><li>C++ 如何在计算机体系结构上进行优化<ol type="1"><li>寄存器</li><li>追问编译器的优化</li></ol></li><li>B+树和B树的区别</li><li>C++ cast</li></ol><h2 id="贰操作系统">贰、操作系统</h2><ol type="1"><li>编译原理</li><li>代码是怎么运行的</li><li>Linux<ol type="1"><li>IO模式有哪些：select、poll、epoll</li><li>常用指令</li><li>top命令，虚拟内存的类型</li><li>查看cpu负载和进程状态命令</li><li>linux中进程怎么通信</li><li>linux下都有哪些目录，分别存放什么</li><li>linux下软链接和硬链接，如果一个文件被删除，访问软链接和硬链接会发生什么</li></ol></li><li>图、拓扑排序</li><li>各种MQ<ol type="1"><li>MQ与EventBus之间的区别</li><li>为什么用MQ，哪些项目用了MQ的特性</li><li>RabbitMQ，为什么选择了RocketMQ</li><li>Kafka</li><li>mq的消费是怎么写的</li><li>mq如何保证消息消费的可靠性</li></ol></li><li>如何增大消费者消费能力，能否无限增大消费者数量，假如资源无限大可以上线无限个消费者能否无限增大数量</li><li>IO多路复用有哪几种实现？分别介绍优缺点</li><li>内核态和用户态、用户态---&gt;内核态的方式</li><li>后端开发比较关注的数据库、消息队列、缓存，了解过哪个</li><li>进程、线程、协程<ol type="1"><li>进程和线程的区别</li><li>进程通信的方式</li><li>自旋锁（CAS），使用场景。什么时候使用自旋锁和管程</li><li>进程线程的场景题</li><li>说一下协程</li><li>进程切换保存了哪些资源</li><li>为什么进程切换要陷入内核</li><li>hashTable是否线程安全，如何实现线程安全</li><li>互斥锁</li><li>对僵尸进程的理解</li><li>线程同步说一下</li><li>线程死锁</li><li>进程和线程（调度、上下文切换、PCB、TCB）</li><li>多进程、多线程</li><li>进程调度</li><li>为什么说线程是调度的基本单位</li><li>进程切换需要做什么</li><li>读写锁</li><li>几线程循环依次打印（互斥量和信号量都可以实现</li><li>设计一个线程池，需要考虑哪些方面？线程数达到最大怎么办？</li></ol></li><li>死锁<ol type="1"><li>如何解决死锁，给你两个线程，两把锁，如何不造成死锁</li></ol></li><li>操作系统的锁的实现，管程和信号量</li><li>虚拟内存逻辑地址转物理地址</li><li>操作系统为什么要有虚拟内存</li><li>生产者消费者模式知道吗？写一个生产者消费者模式吧</li><li>MQ了解吗</li><li>强引用弱引用软引用虚引用对比</li><li>页面置换算法，内部碎片产生</li><li>页面缓存是什么？有什么作用？</li><li>mmap和Page Cache有什么区别？mmap是COW的</li><li>设计操作系统需要实现哪些功能：进程管理，文件管理，内存管理，IO管理等</li></ol><h2 id="叁计算机网络">叁、计算机网络</h2><ol type="1"><li>url输入后发生什么、输入url到浏览器的过程<ol type="1"><li>dns解析</li><li>ARP地址转换</li><li>TCP连接</li><li>数据打包发送</li><li>内容解析显示</li><li>。。。</li></ol></li><li>HTML页面渲染过程</li><li>网络IO的机制</li><li><a href="www.baidu.com">百度</a>请求的是什么类型的服务器</li><li>XSS攻击介绍一下，前缀树是用来干啥的</li><li>ipv4和ipv6的区别</li><li>什么是滑动窗口？是否固定？什么时候改变？</li><li>TCP<ol type="1"><li>三次握手四次挥手过程</li><li>为啥握手是三次，挥手是四次？</li><li>为什么要有最后一次挥手？</li><li>可靠性、校验码、重发、流量控制</li><li>TCP、UDP的使用场景</li><li>非技术角度谈谈三次握手到底在做什么</li><li>视频、直播、游戏等采用TCP还是UDP</li><li>UDP是什么、为什么实时性好</li><li>UDP的可靠设计（问的很具体、会提出各种问题，如何处理）、UDP如何保证可靠传输（quic）</li></ol></li><li>流量控制和拥塞控制区别<ol type="1"><li>滑动窗口（连续ARQ、停止等待ARQ）</li><li>拥塞控制（四个算法、具体实现）</li><li>发送窗口 接收窗口 拥塞窗口</li><li>TCP/IP 为什么一定要有滑动窗口</li><li>检错策略和窗口大小变化、提高信道利用率，流量控制、慢开始和拥塞避免</li></ol></li><li>http与tcp的keep alive的区别</li><li>http<ol type="1"><li><a href="https://www.runoob.com/http/http-status-codes.html">http状态码</a>：502 Bad Gateway、500Internal Server Error、502、503、206</li><li>http是什么、header 格式是什么样的？</li><li>https和http的区别</li><li>get和post的区别</li><li>https的通信流程</li><li>ssl如何保证通信？如何保证不被篡改？</li><li>判断CA证书规范？ssl证书由ca机构颁发嘛，怎么判断这个厂家可信？怎么确定厂家的信息没有被篡改？</li><li>加密<ol type="1"><li>对称加密、非对称加密</li><li>详细说下HTTPS的加密过程</li></ol></li></ol></li><li>中间人攻击</li><li>如果自定义证书呢？消息会不会被中间人攻击</li><li>说下 RPC，与 HTTP 的区别</li><li>微服务rpc与消息队列，如何使用，使用场景。为什么使用消息队列不使用rpc</li><li>cookie和session</li><li>深入探讨了MSS,MTU，子网掩码的作用</li><li>路由选择协议</li><li>osi<ol type="1"><li>七层模型</li><li>各层之间能不能反过来封装</li></ol></li><li>ARP：ip地址和mac地址什么的</li><li>怎么发起一个网络请求？用C++写一个发起网络请求</li><li>手写个socket的过程</li><li>es的可靠性怎么保证的</li><li>服务器一天收到多个客户端请求，给你这些请求的时间戳和客户端ip ，求一天访问不同客户端最多的分钟</li><li>ping 的过程</li><li>dns域名解析过程</li><li>不使用消息队列，如何实现服务之间数据通信（Http长轮询 和 类似于实现发布订阅机制的中间件如redis）</li><li>RSA算法</li></ol><h2 id="肆数据库">肆、数据库</h2><ol type="1"><li>对redis的理解<ol type="1"><li>redis 与 MC 对比， 为何选在redis</li><li>MemCache了解吗？Redis用过吗？</li><li>redis集群</li></ol></li><li>Serverless应用场景知道吗？</li><li>mysql连接池</li><li>MySQL索引<ol type="1"><li>Mysql中索引使用的原则</li><li>为什么要设计索引</li><li>怎么建立索引</li><li>联合索引的实现</li><li>索引优化</li><li>索引底层是怎么实现的</li><li>数据库中索引为什么效率快</li></ol></li><li>索引、联合索引、最左原则</li><li>慢SQL查询、慢SQL优化</li><li>mysql的rc和rr在更新时怎样加锁</li><li>sql语句的优化你了解吗?你知道哪些?</li><li>Mysql分库分表，怎么知道用户在哪个表中？</li><li>Redis和Memcached有什么区别?</li><li>Redis的缓存雪崩怎么解决?有没有更好的办法?</li><li>索引树高度一般是怎样的，如何根据一次IO的数据量及一些其他数据算出高度</li><li>MySQL联合索引列出各种情况看能否走索引</li><li>插入和删除时索引树的变化</li><li>讲讲分布式锁，如何实现</li><li>SQL和NoSQL的区别，各自在什么场景下使用</li><li>Mysql有哪几种引擎？为什么MyIsam比InnoDb查询快？</li><li>倒排索引是什么？</li><li>说说一条sql语句的执行过程</li><li>缓存和 DB 之间怎么保证数据一致性</li><li>说下索引二八原理、提升读性能牺牲写性能的数据结构一个索引对应一颗 B+树哈希、有序数组、二叉树查询的优缺点那为什么不用跳表呢？</li><li>火车票区间查询怎么设计数据结构比如上海去武汉，途经南京、合肥现在要快速查询出两点之间票的库存</li><li>怎么删除某一行某一列的数据</li><li>innodb的回滚怎么做的，详细一点</li><li>写sql，给一个表，有id 和 name，找出name重复的id</li><li>事务<ol type="1"><li>ACID</li><li>隔离级别</li><li>脏读、幻读</li></ol></li><li>乐观锁、悲观锁、MVCC</li><li>MySQL的引擎有什么？特点？</li><li>MyISAM, B+ Tree, Hash Index的特点，应用场景？</li><li>B+ Tree Index 为什么对并发控制支持比较好</li><li>select * from xxx where a=‘a’ and b=1 怎么建索引</li><li>如果表中b只有1和2怎么建</li><li>百度的搜索量很大，怎么设计数据库</li><li>分布式服务器怎么进行数据同步?</li><li>怎么解决分布式中数据不一致问题? 两阶段提交、最终一致性?</li><li>怎么设计一个架构，可以支持并发查询不同服务器数据库中的数据。比如A数据在A服务器的数据库,B数据在B服务器的数据库</li><li>如果有100万用户，你怎么设计分库分表的策略?有没有自己的想法?</li><li>Mysql中分布式事务了解吗? 怎么解决不一致的问题?</li><li>Redis缓存击穿怎么解决? 除了使用布隆过滤器，你还知道其他方法吗?布隆过滤器实际中用的多吗?你在实际应用中使用过吗?</li><li>分布式中的限流了解过吗? 令牌桶了解过吗?</li></ol><h2 id="伍算法和其他知识">伍、算法和其他知识</h2><p>算法题用ACM模式哒~ 需要自己搞定输入输出，需要链表或者二叉树的话也需要自己创建的~</p><ol type="1"><li>给一个数n，在给一个数组，这个数组里的数都是个位数，用这个数组里的数构造出小于n的最大整数。</li><li>比n大的最小回文数，猜测是<a href="https://leetcode.cn/problems/find-the-closest-palindrome/">寻找最近的回文数</a></li><li><a href="https://leetcode-cn.com/problems/first-missing-positive/">缺失的第一个正数</a></li><li><a href="https://leetcode.cn/problems/different-ways-to-add-parentheses/">为运算表达式设计优先级</a></li><li>合并K个有序数组，力扣上只搜到<a href="https://leetcode.cn/problems/merge-k-sorted-lists/">合并K个升序链表</a></li><li>给一个固定长度的数组，用它实现一个先进先出的循环队列，猜测是<a href="https://leetcode.cn/problems/design-circular-queue/">设计循环队列</a></li><li>递归写个<a href="https://leetcode.cn/problems/fei-bo-na-qi-shu-lie-lcof/">斐波那契数列</a></li><li>删除链表中所有重复结点（递归、迭代），猜测是<a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/">删除排序链表中的重复元素 II</a></li><li>随机的一个数组，求出其中连续段最多有几个数字，如[9，3，5，11，8，10，29，30]，连续的有四段，分别为{3}，{5}，{8，9，10，11}，{29，30}；要求时间复杂度O(n)、不能用排序，<a href="https://leetcode.cn/problems/longest-consecutive-sequence/">最长连续序列</a></li><li><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/">K 个一组翻转链表</a></li><li><a href="https://leetcode.cn/problems/longest-palindrome/">最长回文串</a></li><li><a href="https://leetcode.cn/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof/">最长不含重复字符的子字符串</a></li><li>同花顺</li><li>无序数组，找到最小的不存在于数组中的正整数</li><li><a href="https://leetcode.cn/problems/rotate-matrix-lcci/">矩阵旋转</a></li><li>给一个表示扑克牌的整数数组（1-52），判断有无长度为5的顺子</li><li>俩个超大正整数字符串，求和</li><li><a href="https://leetcode.cn/problems/xx4gT2/">数组中的第 k 大的数字</a></li><li><a href="https://leetcode.cn/problems/permutations">全排列</a>、<a href="https://leetcode.cn/problems/permutations-ii">全排列 II</a></li><li><a href="https://leetcode.cn/problems/next-permutation">下一个排列</a></li><li>二叉树<ol type="1"><li><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">二叉树层序遍历</a></li><li><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/">二叉搜索树的第k大节点</a></li><li>二叉树Z遍历，猜测是<a href="https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal/">二叉树的锯齿形层序遍历</a></li><li><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">二叉树的最近公共祖先</a></li><li><a href="https://leetcode.cn/problems/verify-preorder-serialization-of-a-binary-tree/">验证二叉树的前序序列化</a></li><li><a href="https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/">二叉树展开为链表</a></li><li>二叉树解决前缀表达式，猜测<a href="https://leetcode.cn/problems/QC3q1f/">实现前缀树</a></li><li><a href="https://leetcode.cn/problems/shu-de-zi-jie-gou-lcof/">树的子结构</a></li><li><a href="https://leetcode.cn/problems/binary-tree-right-side-view">二叉树的右视图</a></li><li>根到叶子路径和等于目标值的路径</li></ol></li><li>讲讲LRU和LFU<ol type="1"><li>设计算法实现 LFU Cache的实现</li><li><a href="https://leetcode.cn/problems/lfu-cache/">LFU 缓存</a></li><li>怎么实现LFU最优</li><li>LRU算法及其实现，<a href="https://leetcode.cn/problems/lru-cache/">LRU 缓存</a></li></ol></li><li><a href="https://leetcode.cn/problems/next-permutation/">下一个排列</a></li><li><a href="https://leetcode.cn/problems/climbing-stairs/">爬楼梯</a>，一次最多爬2格；用数学公式证明写题的递推公式</li><li>给一个括号序列，求最长合法子串长度，我猜测是<a href="https://leetcode.cn/problems/longest-valid-parentheses/">最长有效括号</a></li><li><a href="https://leetcode.cn/problems/multiply-strings/">字符串相乘</a></li><li><a href="https://leetcode.cn/problems/spiral-matrix/">螺旋矩阵</a></li><li><a href="https://leetcode.cn/problems/path-sum-ii/">路径总和II</a></li><li>这个是其余数字都出现两次：<a href="https://leetcode.cn/problems/single-number/">只出现一次的数字</a>；这个是其余数字都出现三次：<a href="https://leetcode.cn/problems/WGki4K/">只出现一次的数字</a></li><li><a href="https://leetcode.cn/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/">旋转数组的最小数字</a></li><li><a href="https://leetcode.cn/problems/combination-sum-ii">组合总和 II</a></li><li>topN问题、最小堆</li><li>用给定集合中的数字构造小于给定数值的最大数</li><li><a href="https://leetcode.cn/problems/SsGoHC">合并区间</a></li><li>买入卖出股票</li><li><a href="https://leetcode.cn/problems/compress-string-lcci">字符串压缩</a></li><li><a href="https://leetcode.cn/problems/7WHec2">链表排序</a></li><li>怎么判断两个链表相交？<a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci">链表相交</a></li><li><a href="https://leetcode.cn/problems/merge-two-sorted-lists">合并两个有序链表</a></li><li>将一个只含有小写字母的字符串划分为尽可能多的子串，要求相同的字符只能出现在一个子串中</li><li>数组中有两个出现过一次的数，怎么找</li><li>矩阵转多叉树</li><li>两个版本号比大小，主/子版本号可能有前置0、中间用.分隔，版本号1小于版本号2时返回-1，等于时返回0，大于时返回1。如果一个版本号是另一个版本号的前缀，并且另一个版本号后跟子版本号都为0，那么认为这两个版本号相等，否则认为第二个版本号大于第一个版本号，猜测是<a href="https://leetcode.cn/problems/compare-version-numbers/">比较版本号</a></li><li>一个二叉树，求树根到各个叶子结点路径上的k值之和，k值定义为路径上各节点值顺次连接而成的十进制数字：如1-&gt;2-&gt;4，1为根，4为叶，这条路经贡献的值为124</li><li>假设给予一个数组，其size已知已知数组内放置的是排好序的自然数（从小到大）问数组内是否存在一个数，其重复的次数超过数组长度的一半期望时间复杂度O(logn) （例如100个数的一个数组，假如里面有一个数重复了超过50次，比如51次、55次、80次，那么返回True，否则返回False），和<a href="https://leetcode.cn/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/">数组中出现次数超过一半的数字</a>比较像</li><li>SQL题<ol type="1"><li>《学生姓名得分表》中有四列，ID（学号/唯一key），name（可能重名），course（选课名，不同同学可能选择一样或不一样），score（0-100分，&lt;60分算不及格），每一行放置的是某一位同学某一门课程的得分 。求平均分不及格的学生姓名</li><li>查询成绩排名前5名的同学，我感觉和<a href="https://leetcode.cn/problems/department-top-three-salaries/">部门工资前三高的所有员工</a>比较像</li><li>计算每个班学生的平均成绩，输出班级和平均成绩</li></ol></li><li>简单的csv读取</li><li>怎么根据 0-5 随机函数得到 0-8 随机函数</li><li>写一个函数一秒内调用1000次返回true，超过1000次返回false，超过1s重新统计</li><li>Paxos算法原理</li><li>Service mesh了解吗</li><li>幂等</li><li>json字符串怎么解析的</li><li>google inject（依赖注入框架）及依赖注入的优点</li><li>一致性hash的应用场景？CDN的例子+忘了怎么move节点</li><li>slice的扩容机制</li><li>跳表？</li></ol><h2 id="陆发散性问题">陆、发散性问题</h2><ol type="1"><li>场景设计题<ol type="1"><li>已知抖音用户登入和登出时间统计某个时刻在线人数</li><li>两个巨大的文本（大小远超内存）比较，设计比较方法、磁盘IO</li><li>多个地铁站点，如何实现选择两站点的最优路线（时间、距离等因素），如果换乘时间也要考虑呢？</li><li>停车场，两个出口两个入口，要求有查询剩余车位，以及车辆停车计费的功能，用面向对象的思想怎么设计类</li><li>大量动态数据，要求实时计算前1万名精确排名，和后一万名的大致排名，用什么方法</li><li>有一百万个范围在1-1e之间的数，使用哪个排序算法最快</li><li>问一个天平和四个药罐，称1次怎样得到哪个药罐污染</li><li>描述一个电梯系统的设计</li><li>设计一个分布式ID生成器（即答UUID被否了，然后想了半天时间生成的hash算法也没有头绪，提示了之后联系AUTO INCREMENT KEY好不容易扯了一个实现，优化就更没有了（大概同步代价很大，然后数据库操作比较耗时，查了之后发现原来是个很经典的问题）</li><li>设计操作系统的复制粘贴功能、计算机粘贴复制底层原理</li><li>模拟微信群随机红包，输入金额、人数，返回金额数组；注意最小单位分</li></ol></li><li>项目经历和实习经历<ol type="1"><li>介绍</li><li>收获是什么</li><li>项目的架构和技术难点</li><li>项目中的难点、模块然后还问了一些依赖模块的底层实现</li><li>项目的数据量以及 QPS 能达到多少</li><li>项目、实习的收获和不足</li><li>项目中大约写过多少行代码</li></ol></li><li>对数据结构有什么理解</li><li>时间为15:30的时针与分针的夹角</li><li>学过什么课程</li><li>怎么学习技术的、有没有学过计算机相关的课，自己是如何学的</li><li>自学计网和操作系统时遇到什么比较晦涩的知识</li><li>为了面试做了什么准备</li><li>为什么要做程序员</li><li>你觉得你聪明吗</li><li>性格、优点缺点、大学生活、成绩等等</li><li>你希望你处于一个什么样的工作环境</li><li>对岗位的了解</li><li>对字节的了解</li><li>实习时长</li><li>来字节最想得到什么、想做什么</li><li>内心的源动力来源于什么</li><li>职业规划</li><li>介绍微服务</li><li>小程序的优缺点</li><li>未来发展移动端发展趋势</li></ol><h2 id="柒反问环节">柒、反问环节</h2><ol type="1"><li>找实习生更看重哪些方面？</li><li>业务主要是做什么的</li><li>从您的角度，对我今天的面试情况打个分，十分制的话<ol type="1"><li>您觉得我做的比较好的地方在哪里？</li><li>您觉得失分点在哪里？</li></ol></li><li>如果通过的话，后面还有hr面嘛？</li><li>如果疫情严重，可以线上实习嘛？</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过hexo+github配置个人博客的过程</title>
      <link href="/2022/05/13/%E9%80%9A%E8%BF%87hexo+github%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
      <url>/2022/05/13/%E9%80%9A%E8%BF%87hexo+github%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="壹购买域名并设置">壹、购买域名并设置</h3><ol type="1"><li><p>注册域名就可以通过个人独特的域名访问自己的博客啦~</p><p>当然也可以不注册，不注册域名的话也可以用github.io来访问，都一样的</p></li><li><p>现在挺多平台都可以注册域名，我选择了<a href="https://wanwang.aliyun.com/domain/searchresult/#/?keyword=&amp;suffix=com">阿里云</a>，自己找个自己喜欢的域名就可以啦~我自己定了<code>doubleyue.life</code></p></li><li><p>域名配置DNS解析，如下图所示：箭头指向的地方就用github的用户名<code>xxx.github.io</code>就行</p><figure><img src="image-20220513134905627.png" alt="image-20220513134905627"><figcaption aria-hidden="true">image-20220513134905627</figcaption></figure></li></ol><h3 id="贰安装git">贰、安装git</h3><ol type="1"><li>到<a href="https://git-scm.com/">官网</a>下载安装</li></ol><h3 id="叁创建github仓库">叁、创建GitHub仓库</h3><ol type="1"><li>在<a href="https://github.com/">github</a>创建个人博客的仓库，我的是<a href="https://github.com/TracyWang-0/doubleyue">doubleyue</a></li></ol><h3 id="肆在仓库创建pages页面并修改域名">肆、在仓库创建pages页面，并修改域名</h3><ol type="1"><li><p>在新创建的仓库的设置页面，不是个人中心的设置啊</p><figure><img src="image-20220513140338867.png" alt="image-20220513140338867"><figcaption aria-hidden="true">image-20220513140338867</figcaption></figure></li><li><p>选择pages，然后<code>choose a theme</code>，然后就等一会儿，反应会有点慢，就出现下面的页面了！</p><p>通过上面的链接就可以访问当前仓库，如果有购买域名的话，可以把<code>3</code>那里修改成自己的域名，然后保存一下，再等会儿，就可以通过自己的域名访问这个仓库啦~</p><figure><img src="image-20220513140629704.png" alt="image-20220513140629704"><figcaption aria-hidden="true">image-20220513140629704</figcaption></figure></li></ol><h3 id="伍关联仓库和本地主机">伍、关联仓库和本地主机</h3><ol type="1"><li><p>打开本地终端，把下面的复制到终端，修改下邮件地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"GitHub的邮件地址"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>打开目录<code>~/.ssh</code>，找到<code>id_rsa.pub</code>文件，用文本编辑器打开，全选复制</p></li><li><p>打开GitHub的个人设置页面，选择<code>SSH and GPG keys</code>，新建一个ssh key，名称随便，把刚才复制的文本粘贴进去，保存就好</p></li><li><p>测试是否成功链接。把下面的复制到终端，<strong>啥也不用改</strong>，回车后如果出现自己的GitHub名字就说明关联成功啦~</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="陆安装hexo">陆、安装hexo</h3><ol type="1"><li><p>安装node.js，到<a href="https://nodejs.org/en/download/">官网</a>下载安装</p></li><li><p>安装hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo<span class="token comment"># 查看版本</span>hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="柒初始化本地博客目录">柒、初始化本地博客目录</h3><ol type="1"><li><p>直接在终端输入下面的语句，<code>myblog</code>可以自己改个名字，运行完以后会生成这个文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init myblog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="捌创建一个博客并在本地测试">捌、创建一个博客并在本地测试</h3><ol type="1"><li><p>创建一个test博客，可以在<code>source/_post</code>下找到<code>test.md</code></p><pre class="line-numbers language-none"><code class="language-none">hexo new post "test"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>生成并本地测试，输入下面代码运行完以后</p><pre class="line-numbers language-none"><code class="language-none">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开浏览器，输入<code>localhost:4000</code>，就可以看到自己的博客了</p></li></ol><h3 id="玖部署到github仓库并打开域名查看">玖、部署到GitHub仓库并打开域名查看</h3><ol type="1"><li><p>部署到GitHub的过程会比较慢，所以我一般先本地测试正常以后，再部署。通过下面的语句就可以部署啦~</p><pre class="line-numbers language-none"><code class="language-none">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>打开自己的域名，比如我的<code>doubleyue.life</code>，就可以看到自己的博客啦~</p><p>不过部署真的很慢，要等好几分钟才能看到更新</p><p>后面如果更换主题需要配置的项目比较多，本地测试，然后直接部署就行~</p><p>之前没想到部署后这么久才能看到更新，所以一直以为自己哪里搞错了。。。</p></li></ol><h3 id="拾找个自己喜欢的主题并进行一系列的配置">拾、找个自己喜欢的主题并进行一系列的配置</h3><ol type="1"><li><p>在<a href="https://hexo.io/themes/">hexo的主题页</a>选择自己的喜欢的主题，进入相应的教程进行配置就好啦</p></li><li><p>我这里选择的是<a href="https://fi3ework.github.io/archer-demo/">archer</a>，跟着配置步骤一步步来就好啦~</p><p>这个主题现在还有人在进行维护，之前遇到了问题，咨询后很快就得到了回复，超棒！</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OSI七层模型和TCP/IP五层模型</title>
      <link href="/2022/05/12/OSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B%E5%92%8CTCP-IP%E4%BA%94%E5%B1%82%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/05/12/OSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B%E5%92%8CTCP-IP%E4%BA%94%E5%B1%82%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一osi七层模型">一、OSI七层模型</h2><p>从下到上依次为：① 物理层、② 数据链路层、③ 传输层、④ 网络层、 ⑤ 应用层、⑥ 会话层、 ⑦ 表示层</p><h2 id="二tcpip五层模型">二、TCP/IP五层模型</h2><p>从OSI七层模型发展而来，从下到上依次为：① 物理层、② 数据链路层、③ 传输层、④ 网络层、 ⑤ 应用层</p>]]></content>
      
      
      <categories>
          
          <category> 知识积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象的六大原则</title>
      <link href="/2022/05/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
      <url>/2022/05/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="一单一职责原则">一、单一职责原则</h2><p>每个模块/类都应该对软件提供的功能的一部分负责，而这个责任应该完全由类来封装。</p><h2 id="二开闭原则">二、开闭原则</h2><p>软件中的对象(类、模块、函数等)对扩展是开放的，对修改是封闭的。 当然，这只是理想化的愿景，在实际开发中，修改原有代码、扩展代码往往是同时存在的。 已存在的实现类对于修改是封闭的，新的实现类可以通过覆写父类的接口应对变化。</p><h2 id="三里氏替换原则">三、里氏替换原则</h2><p>所有使用基类的地方必须能透明地使用其子类的对象</p><h2 id="四依赖倒转原则">四、依赖倒转原则</h2><p>是指一种特定的解耦（传统的依赖关系建立在高层次上，而具体的策略设置则应用在低层次的模块上）形式，使得高层次的模块不依赖于低层次的模块的实现细节，依赖关系被颠倒（反转），从而使得低层次模块依赖于高层次模块的需求抽象。</p><ol type="1"><li>高层次的模块不应该依赖于低层次的模块，两者都应该依赖于抽象接口。</li><li>抽象接口不应该依赖于具体实现。而具体实现则应该依赖于抽象接口。</li></ol><h2 id="五接口隔离原则">五、接口隔离原则</h2><p>类不应该依赖它不需要的接口。</p><h2 id="六迪米特法则">六、迪米特法则</h2><p>也称最少知识法则</p><ol type="1"><li>每个对象应该对其他对象的信息知道的尽可能的少</li><li>每个对象应该仅直接和其朋友通信；不和陌生人通信</li></ol>]]></content>
      
      
      <categories>
          
          <category> 知识积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之单例模式</title>
      <link href="/2022/05/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/05/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="一是什么">一、是什么</h3><p>定义：确保一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p><p>因此有几个特征：</p><ol type="1"><li>构造方法不能公开，只能是private</li><li>这个实例是当前类的实例，也就是当前类的类成员变量，用static修饰的类静态变量</li><li>需要提供一个静态方法，向外界提供当前类的实例</li></ol><p>应用场景：</p><ol type="1"><li>序列号生成器</li><li>web页面的计数器</li><li>如果创建一个对象需要消耗很多资源的时候，可以用单例模式来减少资源消耗</li></ol><h3 id="二分类">二、分类</h3><p>根据实例化的时机不同，可以分为饿汉式和懒汉式。</p><ol type="1"><li><p>饿汉模式：在类加载的时候，立刻实例化。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>懒汉模式：</p><ol type="1"><li>基础：在第一次使用的时候进行实例化。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> singleton<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2" type="1"><li>双重检查锁：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> singleton<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例化具体步骤：</p><p>① 分配内存；② 初始化对象；③ 指向刚分配的地址。</p><p>但是可能发生重排序：</p><p>假设 A 线程执行了①和③，B 线程过来判断为null，B就直接返回尚未实例化的instance了。使用volatile可以避免重排序。</p></li></ol><h3 id="三存在的问题">三、存在的问题：</h3><ol type="1"><li>多个实例的情况<ol type="1"><li>在分布式系统中，多个JVM虚拟机，各个虚拟机都有一个实例。</li><li>同一个JVM虚拟机的多个类加载器同时加载这个类，也会产生多个实例。</li></ol></li><li>只有一个实例，类中的变量可能会因为被修改而导致出错。因此最好以无状态的工具类提供。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 知识积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之工厂模式</title>
      <link href="/2022/05/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/05/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="一简单工厂模式simple-factory-pattern">一、简单工厂模式Simple Factory Pattern</h3><p>又称静态工厂方法Static Factory Method，属于<strong>创建型模式</strong>。</p><p>根据参数的不同返回不同类的实例。</p><p>简单工厂模式专门创建一个类来创建其他类的实例，被创建的实例通常具有共同的父类。类图如下：</p><p><img src="image-20220511132031921.png" alt="image-20220511132031921" style="zoom:50%;"></p><p>优点：将对象的创建和使用分离，把创建产品的过程交给专门的工厂类负责，客户端不用管具体是如何实现的</p><p>缺点：不够灵活，新增一个产品就需要修改工厂类，在工厂中加入必要的业务逻辑，违反了<strong>开闭原则</strong>。</p><h3 id="二工厂模式">二、工厂模式</h3><p>定义一个用于创建对象的接口，让子类决定实例化哪个类。工厂方法使一个类的实例化延迟到其子类。也就是说：</p><p>把核心工厂变成一个抽象接口，为不同的产品创建不同的子工厂，这样子产品的实例化将在子工厂中完成，如果增加新的产品，则创建新的子工厂即可，不需要修改原来的工厂类。类图如下：</p><figure><img src="image-20220511133928629.png" alt="image-20220511133928629"><figcaption aria-hidden="true">image-20220511133928629</figcaption></figure><h3 id="三抽象工厂模式">三、抽象工厂模式</h3><p>是工厂模式的扩展，使得每个子工厂可以创建多个产品，如果只有一个产品体系的话会退化成工厂模式，类图如下：</p><figure><img src="image-20220511142208829.png" alt="image-20220511142208829"><figcaption aria-hidden="true">image-20220511142208829</figcaption></figure><p>缺点：如果需要增加产品体系的话，仍旧需要修改抽象工厂和具体工厂的代码，违反<strong>开闭原则</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 知识积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022暑期实习华为面试经验分享</title>
      <link href="/2022/05/10/2022%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E5%8D%8E%E4%B8%BA%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
      <url>/2022/05/10/2022%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E5%8D%8E%E4%B8%BA%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<p>华为池子，深不可测~ 不过流程进展很快，而且很快会给结果，整体感觉很棒。</p><ol type="1"><li>投递简历：</li></ol><p>在有个实习群里加到以为hr，说有hc，于是投递了通用软件开发工程师的岗位，可以投两个意向。（但是第二个意向其实是不起作用的。</p><ol start="2" type="1"><li>笔试：</li></ol><p>第二周的周二收到周三晚上笔试的邮件，共3道题（分值100,200,300），达到100分就有面试机会。比较麻烦的点在于输入输出，需要从字符串解析出需要读取的数字，输出也是需要把数组转成串输出。</p><ol start="3" type="1"><li>综合测评：</li></ol><p>一周内收到邮件参加综合测评和面试，问了hr说是性格测试，约35min可以完成。有同学表示这个测试不过的话，可以再次参加一次。</p><ol start="4" type="1"><li>技术面：</li></ol><p>同综合测评一起发来的邮件，面试邀约第三周周二下午，可能因为前一个人的时间比较长，面试官上线的时间比预期晚了大约半个小时，面试全程约70min</p><p>​ • 首先介绍下项目，面试官问了点细节，包括自己实现部分的代码量，不难</p><p>​ • 两道编程题，共享屏幕编程：</p><p>​ ◦ 给满二叉树的前序遍历结果，输出后序遍历；一开始以为是完全二叉树，卡住了。。后来面试官提醒了下是满二叉树，然后就很流畅的写完啦</p><p>​ ◦ 上次机试第一题，上次没做出来，然后面试官就让我试试，因为一直不想做这个，所以也磕磕绊绊的，到最后也没完全做出来</p><p>​ • 问了几个八股问题：内核态是什么、线程同时读写问题、还有一些不太记得了，准备下八股问题！</p><p>差不多20min后收到面试通过的短信，很快很赞</p><ol start="5" type="1"><li><p>主管面：</p><p>两天后约了主管面，面试全程约35min</p></li></ol><p>​ • 问了些简历上的问题，多是关于大学的事情，以及职业规划方面的问题，因为准备不够，所以有些问题回答的不是特别好。需要认真准备准备！</p><p>​ • 反问：</p><p>​ ◦ 对互联网裁员的看法</p><p>​ ◦ 实习生的加班情况</p><p>​ ◦ 主要工作内容</p><p>也是差不多20分钟后收到了面试通过的短信，效率很快，超级赞。</p><ol start="6" type="1"><li>面试反馈：</li></ol><p>次日收到面试反馈邮件，对面试评价，五颗星好评</p><ol start="7" type="1"><li>查看官网应聘状态：</li></ol><p>​ • 在官网-个人中心-申请进展页面，按F12</p><p>​ • 选择 network - XHR</p><p>​ • F5刷新页面</p><p>​ • 点一下queryMyJobInterviewPortal...</p><p>​ • 关键属性：</p><p>​ ◦ Index在第一个，说明还在池子等着提交审批</p><p>​ ◦ resume_type提前，说明审批通过，快发意向了，但是牛客上也有说resume_type提前仍旧无消息的</p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++八股</title>
      <link href="/2022/05/10/Cplusplus%E5%85%AB%E8%82%A1/"/>
      <url>/2022/05/10/Cplusplus%E5%85%AB%E8%82%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="一c和c的区别">一、C++和C的区别</h3><ol type="1"><li>面向过程和面向对象的区别</li><li>关键字不一样</li></ol><h3 id="二几个关键字">二、几个关键字</h3><ol type="1"><li>volatile</li><li>final</li><li>const</li></ol><h3 id="三三个特性">三、三个特性</h3><ol type="1"><li>封装</li><li>继承</li><li>多态</li></ol>]]></content>
      
      
      <categories>
          
          <category> 知识积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引</title>
      <link href="/2022/05/10/MySQL%E7%B4%A2%E5%BC%95/"/>
      <url>/2022/05/10/MySQL%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一什么是index">一、什么是index</h3><ol type="1"><li>帮助MySQL提高查询效率的<strong>数据结构</strong></li><li>优点：大大加快数据查询速度</li><li>缺点：①维护索引需要耗费数据库资源；②占用磁盘空间；③对表的数据进行增删改的时候需要维护索引，速度会受到影响。</li></ol><h3 id="二索引分类">二、索引分类</h3><ol type="1"><li>innoDB<ol type="1"><li>主键索引：设置为主键的时候，innodb为<strong>聚簇索引</strong>，不允许有空值</li><li>单值索引/单列索引/普通索引：一个索引只包含单个列，一个表可以有多个单列索引</li><li>唯一索引：索引列的值必须唯一，允许有空值，但是只能有一个null</li><li>复合索引：一个索引包含多个列</li></ol></li><li>myISAM（不需要背）<ol start="5" type="1"><li>full text全文索引：在定义索引的列上支持值的全文查找，允许空值、重复值，只能在文本类型就行创建</li></ol></li></ol><h3 id="三索引的基本操作">三、索引的基本操作</h3><ol type="1"><li><p>创建主键索引，在建表的时候自动创建<code>show index from table</code></p></li><li><p>创建单值索引：</p><ol type="1"><li>建表的时候创建：添加<code>key(name)</code>，无法指定索引名字，默认列名为索引名</li><li>建表之后创建：<code>create index [name] on table(name)</code></li></ol></li><li><p>创建唯一索引：</p><ol type="1"><li>建表的时候创建：添加<code>unique(name)</code>，无法指定索引名字，默认列名为索引名</li><li>建表之后创建：<code>create unique index [name] on table(name)</code></li></ol></li><li><p>复合索引</p><ol type="1"><li><p>建表的时候创建：添加<code>key(name, age)</code>，无法指定索引名字，默认列名为索引名</p></li><li><p>建表之后创建：<code>create unique index [name] on table(name,age)</code></p></li><li><p>Key_name为同一个，都是第一个name</p></li><li><p>利用复合索引需要符合<strong>最左前缀原则</strong>；MySQL会<strong>动态调整字段顺序</strong>以便利用索引</p><p><img src="image-20220505233324023.png" alt="image-20220505233324023" style="zoom:80%;"></p></li></ol></li></ol><h3 id="四innodb引擎底层数据结构">四、innodb引擎底层数据结构</h3><p>是B+树，是B树的一种优化</p><ol type="1"><li>根据主键索引进行排序，链接起来</li><li>一页16kb，可以存储多个结点</li><li>页目录也是16kb：存储每一页第一个结点的<strong>索引值</strong>和<strong>指针</strong>（指向每一页）</li><li>一般3层就是很庞大的数据量了，约10亿数据量</li><li>根节点常驻内存，一般2<sub>4层，最多1</sub>3次磁盘IO</li></ol><h3 id="五b-tree和btree的区别">五、B-tree和B+tree的区别：</h3><ol type="1"><li>b-tree的每个节点都需要存储完整的数据</li><li>b+tree只有叶子节点存储数据，可以降低树的高度</li></ol><h3 id="六聚簇索引和非聚簇索引">六、聚簇索引和非聚簇索引</h3><ol type="1"><li><p>聚簇索引：将数据存储与索引放到了一起，索引结构的叶子节点保存了行数据。比如主键索引等。</p><ol type="1"><li>默认是主键，如果没有主键，则会选择一个唯一且非空的索引代替；</li><li>如果这个索引也没有，innodb会隐式定义一个主键来作为聚簇索引；</li><li>如果已设置了主键为聚簇索引而想要单独设置聚簇索引，必须先删除主键--&gt;添加聚簇索引--&gt;恢复主键。</li></ol></li><li><p>非聚簇索引：将数据与索引分开存储，索引结构的叶子结点指向了数据对应的位置。比如单列索引等</p></li><li><p>特点：①在innodb中，一个表中只能有一个聚簇索引，在聚簇索引上创建的索引称之为辅助索引；②非聚簇索引都是辅助索引，比如单列索引、唯一索引、复合索引。③<strong>辅助索引</strong>的叶子节点存储的不是行的物理位置，而是主键值。④辅助索引访问数据总是需要<strong>二次查找</strong>。</p><p><img src="image-20220506001614319.png" alt="image-20220506001614319" style="zoom:75%;"></p></li><li><p>面试题：为什么辅助索引插入的主键值而不是物理位置？因为增删改的时候需要修改地址，如果非聚簇索引存储的地址，会导致在增删改的时候额外修改索引。</p></li></ol><h3 id="七myisam的索引非聚簇索引">七、myISAM的索引：非聚簇索引</h3><p><img src="image-20220506002554510.png" alt="image-20220506002554510" style="zoom:75%;"></p>]]></content>
      
      
      <categories>
          
          <category> 知识积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
