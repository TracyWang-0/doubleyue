<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>已注册kindle退出demo模式</title>
      <link href="/2022/10/31/%E5%B7%B2%E6%B3%A8%E5%86%8Ckindle%E9%80%80%E5%87%BAdemo%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/10/31/%E5%B7%B2%E6%B3%A8%E5%86%8Ckindle%E9%80%80%E5%87%BAdemo%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>这不是想着kindle要退出中国市场了，想着干脆越狱以后装个微信读书罢了，结果我搞到一半发现我kindle的固件已经升级到最新版了，目前没有对应的越狱文件！</p><blockquote><p>我的kindle~</p><p>型号：kindle PaperWhite4 </p><p>固件：5.14.3.2</p></blockquote><p>没办法，只能回退重置了，嘤嘤嘤</p><p>但是<code>Reset</code>是灰色的，看来没办法直接重置了。。。怎么解决呢，继续往下看</p><img src="image-20221031175708127.png" alt="reset为灰色" style="zoom:50%;"><h3 id="〇、如果注册了的话，先在amazon官方注销设备"><a href="#〇、如果注册了的话，先在amazon官方注销设备" class="headerlink" title="〇、如果注册了的话，先在amazon官方注销设备"></a>〇、如果注册了的话，先在amazon官方注销设备</h3><p>注意！如果已经在当前kindle登录了自己的账号的话，需要先在官网注销当前kindle设备才可以继续下面的步骤</p><p>在<a href="https://www.amazon.cn/hz/mycd/digital-console/alldevices">管理我的内容和设备</a>中，找到kindle并注销设备</p><p>稍微等一会儿，kindle这边就自动取消注册了（注册过说明这个时候kindle已经联网了，不要把网络断开）</p><h3 id="壹、在kindle的搜索框中输入；demo"><a href="#壹、在kindle的搜索框中输入；demo" class="headerlink" title="壹、在kindle的搜索框中输入；demo"></a>壹、在kindle的搜索框中输入<code>；demo</code></h3><p>如果是已经注册过的设备，应该会出现以下步骤，以下步骤结束</p><ol><li><p>进入到<code>Demo Activation</code>，选择<code>Yes</code>，会重启设备，等ing</p></li><li><p>开机后选择语言：English –&gt; the United Kindom，继续等ing</p></li><li><p>配置wifi</p></li><li><p>进入到<code>Register This Demo</code>，随便填就行，然后继续选择skip、Standard、DONE，继续等ing</p></li><li><p>进入到<code>CONFIGURE DEVICE</code>，有个特殊手势退出这个页面</p></li><li><p>双击一下屏幕右下角，紧接着一根指头从右向左滑一下，多试几次，总能退出的</p></li><li><p>退出以后重新在kindle的搜索框中输入<code>；demo</code>，会出现好多选项，如下图所示：</p><img src="image-20221031183724686.png" alt="Demo Menu" style="zoom:50%;"></li></ol><h3 id="贰、选resell-device"><a href="#贰、选resell-device" class="headerlink" title="贰、选resell device"></a>贰、选resell device</h3><p>然后我因为电量低需要充电才能继续，提示如下，在充电ing</p><img src="image-20221031183600794.png" alt="需要充电的提示" style="zoom:50%;"><p>也可能会因为电量太足而需要放电</p><p>如果息屏的话，就重新进去再试试就行，或者把电源线拔了再试试，反正流程就是这么个流程</p><p>resell之后会重启，然后再注册下自己的账号就行啦~</p><h3 id="参考来源："><a href="#参考来源：" class="headerlink" title="参考来源："></a>参考来源：</h3><p><a href="https://water-is.me/index.php/2022/05/31/188.html">Kindle退出演示模式的方法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> kindle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python读取txt</title>
      <link href="/2022/06/21/python%E8%AF%BB%E5%8F%96txt/"/>
      <url>/2022/06/21/python%E8%AF%BB%E5%8F%96txt/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> ospath <span class="token operator">=</span> <span class="token string">'aaa.txt'</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  aaa <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>  f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 知识积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu遇到Sub-process /usr/bin/dpkg returned an error code (1)的解决</title>
      <link href="/2022/06/07/ubuntu%E9%81%87%E5%88%B0Sub-process-usr-bin-dpkg-returned-an-error-code-1-%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
      <url>/2022/06/07/ubuntu%E9%81%87%E5%88%B0Sub-process-usr-bin-dpkg-returned-an-error-code-1-%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>因为安装deb文件出现错误~</p><p>导致后续装软件的时候总是报个错误，也装不好</p><p>找了个教程，试了下，解决还挺容易的</p><p>执行了下面几条命令，就好啦~</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> remove --purge package_name<span class="token punctuation">(</span>qbittorrent<span class="token punctuation">)</span><span class="token function">sudo</span> <span class="token function">apt</span> autoremove<span class="token function">sudo</span> dpkg --configure -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参考来源：</p><p><a href="https://blog.csdn.net/u013832707/article/details/113104006">解决 dpkg 安装出错后的 Sub-process /usr/bin/dpkg returned an error code (1) 错误</a></p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac报错：此电脑不能读取您连接的磁盘</title>
      <link href="/2022/06/02/Mac%E6%8A%A5%E9%94%99%EF%BC%9A%E6%AD%A4%E7%94%B5%E8%84%91%E4%B8%8D%E8%83%BD%E8%AF%BB%E5%8F%96%E6%82%A8%E8%BF%9E%E6%8E%A5%E7%9A%84%E7%A3%81%E7%9B%98/"/>
      <url>/2022/06/02/Mac%E6%8A%A5%E9%94%99%EF%BC%9A%E6%AD%A4%E7%94%B5%E8%84%91%E4%B8%8D%E8%83%BD%E8%AF%BB%E5%8F%96%E6%82%A8%E8%BF%9E%E6%8E%A5%E7%9A%84%E7%A3%81%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h3 id="壹、报错如下"><a href="#壹、报错如下" class="headerlink" title="壹、报错如下"></a>壹、报错如下</h3><p>此电脑不能读取您连接的磁盘。</p><img src="Mac报错：此电脑不能读取您连接的磁盘/image-20220602191700285.png" alt="image-20220602191700285" style="zoom:50%;"><img src="Mac报错：此电脑不能读取您连接的磁盘/image-20220602191748129.png" alt="image-20220602191748129" style="zoom:40%;"><h3 id="贰、尝试解决"><a href="#贰、尝试解决" class="headerlink" title="贰、尝试解决"></a>贰、尝试解决</h3><ol><li>重置mac的SMC —&gt; 达咩</li><li>windos对优盘进行各种格式的格式化 —&gt; 插入mac后格式化 —&gt; 达咩</li><li>linux对优盘格式化以后 —&gt; 插入mac后格式化 —&gt; 搞定！</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异或、同或运算</title>
      <link href="/2022/05/16/%E5%BC%82%E6%88%96%E3%80%81%E5%90%8C%E6%88%96%E8%BF%90%E7%AE%97/"/>
      <url>/2022/05/16/%E5%BC%82%E6%88%96%E3%80%81%E5%90%8C%E6%88%96%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="壹、异或运算"><a href="#壹、异或运算" class="headerlink" title="壹、异或运算"></a>壹、异或运算</h2><ol><li>符号：⊕、XOR、EOR、EX-OR</li><li>规则：同为0，异为1</li><li>公式：a ⊕ b = (¬a ∧ b) ∨ (a ∧¬b)</li><li>举例：<ol><li>同为0：0 ⊕ 0 = 1 ⊕ 1 = 0</li><li>异为1：0 ⊕ 1 = 1 ⊕ 0 = 1</li></ol></li></ol><h2 id="贰、同或运算"><a href="#贰、同或运算" class="headerlink" title="贰、同或运算"></a>贰、同或运算</h2><ol><li>符号： ⊙ </li><li>规则：同为1，异为0</li><li>公式：a ⊙ b = ab + ¬a¬b</li><li>举例：<ol><li>同为1：0 ⊕ 0 = 1 ⊕ 1 = 1</li><li>异为0：0 ⊕ 1 = 1 ⊕ 0 = 0</li></ol></li></ol><hr><blockquote><p>几个逻辑符号介绍：</p><ol><li>与∧：a ∧ b，a和b都为真，结果为真；否则结果为假。</li><li>或∨：a ∨ b，a和b都为假，结果为假；否则结果为真。</li><li>非¬：¬a，若a为真，结果为假；若a为假，结果为真。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 知识积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过hexo+github配置个人博客的过程</title>
      <link href="/2022/05/13/%E9%80%9A%E8%BF%87hexo+github%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
      <url>/2022/05/13/%E9%80%9A%E8%BF%87hexo+github%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="壹、购买域名并设置"><a href="#壹、购买域名并设置" class="headerlink" title="壹、购买域名并设置"></a>壹、购买域名并设置</h3><ol><li><p>注册域名就可以通过个人独特的域名访问自己的博客啦~ </p><p>当然也可以不注册，不注册域名的话也可以用github.io来访问，都一样的</p></li><li><p>现在挺多平台都可以注册域名，我选择了<a href="https://wanwang.aliyun.com/domain/searchresult/#/?keyword=&amp;suffix=com">阿里云</a>，自己找个自己喜欢的域名就可以啦~我自己定了<code>doubleyue.life</code></p></li><li><p>域名配置DNS解析，如下图所示：箭头指向的地方就用github的用户名<code>xxx.github.io</code>就行</p><p><img src="/2022/05/13/%E9%80%9A%E8%BF%87hexo+github%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/image-20220513134905627.png" alt="image-20220513134905627"></p></li></ol><h3 id="贰、安装git"><a href="#贰、安装git" class="headerlink" title="贰、安装git"></a>贰、安装git</h3><ol><li>到<a href="https://git-scm.com/">官网</a>下载安装</li></ol><h3 id="叁、创建GitHub仓库"><a href="#叁、创建GitHub仓库" class="headerlink" title="叁、创建GitHub仓库"></a>叁、创建GitHub仓库</h3><ol><li>在<a href="https://github.com/">github</a>创建个人博客的仓库，我的是<a href="https://github.com/TracyWang-0/doubleyue">doubleyue</a></li></ol><h3 id="肆、在仓库创建pages页面，并修改域名"><a href="#肆、在仓库创建pages页面，并修改域名" class="headerlink" title="肆、在仓库创建pages页面，并修改域名"></a>肆、在仓库创建pages页面，并修改域名</h3><ol><li><p>在新创建的仓库的设置页面，不是个人中心的设置啊</p><p><img src="/2022/05/13/%E9%80%9A%E8%BF%87hexo+github%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/image-20220513140338867.png" alt="image-20220513140338867"></p></li><li><p>选择pages，然后<code>choose a theme</code>，然后就等一会儿，反应会有点慢，就出现下面的页面了！</p><p>通过上面的链接就可以访问当前仓库，如果有购买域名的话，可以把<code>3</code>那里修改成自己的域名，然后保存一下，再等会儿，就可以通过自己的域名访问这个仓库啦~</p><p><img src="/2022/05/13/%E9%80%9A%E8%BF%87hexo+github%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/image-20220513140629704.png" alt="image-20220513140629704"></p></li></ol><h3 id="伍、关联仓库和本地主机"><a href="#伍、关联仓库和本地主机" class="headerlink" title="伍、关联仓库和本地主机"></a>伍、关联仓库和本地主机</h3><ol><li><p>打开本地终端，把下面的复制到终端，修改下邮件地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"GitHub的邮件地址"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>打开目录<code>~/.ssh</code>，找到<code>id_rsa.pub</code>文件，用文本编辑器打开，全选复制</p></li><li><p>打开GitHub的个人设置页面，选择<code>SSH and GPG keys</code>，新建一个ssh key，名称随便，把刚才复制的文本粘贴进去，保存就好</p></li><li><p>测试是否成功链接。把下面的复制到终端，<strong>啥也不用改</strong>，回车后如果出现自己的GitHub名字就说明关联成功啦~</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="陆、安装hexo"><a href="#陆、安装hexo" class="headerlink" title="陆、安装hexo"></a>陆、安装hexo</h3><ol><li><p>安装node.js，到<a href="https://nodejs.org/en/download/">官网</a>下载安装</p></li><li><p>安装hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo<span class="token comment"># 查看版本</span>hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="柒、初始化本地博客目录"><a href="#柒、初始化本地博客目录" class="headerlink" title="柒、初始化本地博客目录"></a>柒、初始化本地博客目录</h3><ol><li><p>直接在终端输入下面的语句，<code>myblog</code>可以自己改个名字，运行完以后会生成这个文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init myblog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="捌、创建一个博客并在本地测试"><a href="#捌、创建一个博客并在本地测试" class="headerlink" title="捌、创建一个博客并在本地测试"></a>捌、创建一个博客并在本地测试</h3><ol><li><p>创建一个test博客，可以在<code>source/_post</code>下找到<code>test.md</code></p><pre class="line-numbers language-none"><code class="language-none">hexo new post "test"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>生成并本地测试，输入下面代码运行完以后</p><pre class="line-numbers language-none"><code class="language-none">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开浏览器，输入<code>localhost:4000</code>，就可以看到自己的博客了</p></li></ol><h3 id="玖、部署到GitHub仓库并打开域名查看"><a href="#玖、部署到GitHub仓库并打开域名查看" class="headerlink" title="玖、部署到GitHub仓库并打开域名查看"></a>玖、部署到GitHub仓库并打开域名查看</h3><ol><li><p>部署到GitHub的过程会比较慢，所以我一般先本地测试正常以后，再部署。通过下面的语句就可以部署啦~</p><pre class="line-numbers language-none"><code class="language-none">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>打开自己的域名，比如我的<code>doubleyue.life</code>，就可以看到自己的博客啦~</p><p>不过部署真的很慢，要等好几分钟才能看到更新</p><p>后面如果更换主题需要配置的项目比较多，本地测试，然后直接部署就行~</p><p>之前没想到部署后这么久才能看到更新，所以一直以为自己哪里搞错了。。。</p></li></ol><h3 id="拾、找个自己喜欢的主题并进行一系列的配置"><a href="#拾、找个自己喜欢的主题并进行一系列的配置" class="headerlink" title="拾、找个自己喜欢的主题并进行一系列的配置"></a>拾、找个自己喜欢的主题并进行一系列的配置</h3><ol><li><p>在<a href="https://hexo.io/themes/">hexo的主题页</a>选择自己的喜欢的主题，进入相应的教程进行配置就好啦</p></li><li><p>我这里选择的是<a href="https://fi3ework.github.io/archer-demo/">archer</a>，跟着配置步骤一步步来就好啦~</p><p>这个主题现在还有人在进行维护，之前遇到了问题，咨询后很快就得到了回复，超棒！</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OSI七层模型和TCP/IP五层模型</title>
      <link href="/2022/05/12/OSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B%E5%92%8CTCP-IP%E4%BA%94%E5%B1%82%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/05/12/OSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B%E5%92%8CTCP-IP%E4%BA%94%E5%B1%82%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一、OSI七层模型"><a href="#一、OSI七层模型" class="headerlink" title="一、OSI七层模型"></a>一、OSI七层模型</h2><p>从下到上依次为：① 物理层、② 数据链路层、③ 传输层、④ 网络层、 ⑤ 应用层、⑥ 会话层、 ⑦ 表示层</p><h2 id="二、TCP-x2F-IP五层模型"><a href="#二、TCP-x2F-IP五层模型" class="headerlink" title="二、TCP/IP五层模型"></a>二、TCP/IP五层模型</h2><p>从OSI七层模型发展而来，从下到上依次为：① 物理层、② 数据链路层、③ 传输层、④ 网络层、 ⑤ 应用层</p>]]></content>
      
      
      <categories>
          
          <category> 知识积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象的六大原则</title>
      <link href="/2022/05/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
      <url>/2022/05/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="一、单一职责原则"><a href="#一、单一职责原则" class="headerlink" title="一、单一职责原则"></a>一、单一职责原则</h2><p>每个模块/类都应该对软件提供的功能的一部分负责，而这个责任应该完全由类来封装。</p><h2 id="二、开闭原则"><a href="#二、开闭原则" class="headerlink" title="二、开闭原则"></a>二、开闭原则</h2><p>软件中的对象(类、模块、函数等)对扩展是开放的，对修改是封闭的。<br>当然，这只是理想化的愿景，在实际开发中，修改原有代码、扩展代码往往是同时存在的。<br>已存在的实现类对于修改是封闭的，新的实现类可以通过覆写父类的接口应对变化。</p><h2 id="三、里氏替换原则"><a href="#三、里氏替换原则" class="headerlink" title="三、里氏替换原则"></a>三、里氏替换原则</h2><p>所有使用基类的地方必须能透明地使用其子类的对象</p><h2 id="四、依赖倒转原则"><a href="#四、依赖倒转原则" class="headerlink" title="四、依赖倒转原则"></a>四、依赖倒转原则</h2><p>是指一种特定的解耦（传统的依赖关系建立在高层次上，而具体的策略设置则应用在低层次的模块上）形式，使得高层次的模块不依赖于低层次的模块的实现细节，依赖关系被颠倒（反转），从而使得低层次模块依赖于高层次模块的需求抽象。</p><ol><li>高层次的模块不应该依赖于低层次的模块，两者都应该依赖于抽象接口。</li><li>抽象接口不应该依赖于具体实现。而具体实现则应该依赖于抽象接口。</li></ol><h2 id="五、接口隔离原则"><a href="#五、接口隔离原则" class="headerlink" title="五、接口隔离原则"></a>五、接口隔离原则</h2><p>类不应该依赖它不需要的接口。</p><h2 id="六、迪米特法则"><a href="#六、迪米特法则" class="headerlink" title="六、迪米特法则"></a>六、迪米特法则</h2><p>也称最少知识法则</p><ol><li>每个对象应该对其他对象的信息知道的尽可能的少</li><li>每个对象应该仅直接和其朋友通信；不和陌生人通信</li></ol>]]></content>
      
      
      <categories>
          
          <category> 知识积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之单例模式</title>
      <link href="/2022/05/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/05/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h3><p>定义：确保一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p><p>因此有几个特征：</p><ol><li>构造方法不能公开，只能是private</li><li>这个实例是当前类的实例，也就是当前类的类成员变量，用static修饰的类静态变量</li><li>需要提供一个静态方法，向外界提供当前类的实例</li></ol><p>应用场景：</p><ol><li>序列号生成器</li><li>web页面的计数器</li><li>如果创建一个对象需要消耗很多资源的时候，可以用单例模式来减少资源消耗</li></ol><h3 id="二、分类"><a href="#二、分类" class="headerlink" title="二、分类"></a>二、分类</h3><p>根据实例化的时机不同，可以分为饿汉式和懒汉式。</p><ol><li><p>饿汉模式：在类加载的时候，立刻实例化。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>懒汉模式：</p><ol><li>基础：在第一次使用的时候进行实例化。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> singleton<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>双重检查锁：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> singleton<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例化具体步骤：</p><p>① 分配内存；② 初始化对象；③ 指向刚分配的地址。</p><p>但是可能发生重排序：</p><p>假设 A 线程执行了①和③，B 线程过来判断为null，B就直接返回尚未实例化的instance了。使用volatile可以避免重排序。</p></li></ol><h3 id="三、存在的问题："><a href="#三、存在的问题：" class="headerlink" title="三、存在的问题："></a>三、存在的问题：</h3><ol><li><p>多个实例的情况</p><ol><li>在分布式系统中，多个JVM虚拟机，各个虚拟机都有一个实例。</li><li>同一个JVM虚拟机的多个类加载器同时加载这个类，也会产生多个实例。</li></ol></li><li><p>只有一个实例，类中的变量可能会因为被修改而导致出错。因此最好以无状态的工具类提供。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 知识积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之工厂模式</title>
      <link href="/2022/05/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/05/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="一、简单工厂模式Simple-Factory-Pattern"><a href="#一、简单工厂模式Simple-Factory-Pattern" class="headerlink" title="一、简单工厂模式Simple Factory Pattern"></a>一、简单工厂模式Simple Factory Pattern</h3><p>又称静态工厂方法Static Factory Method，属于<strong>创建型模式</strong>。</p><p>根据参数的不同返回不同类的实例。</p><p>简单工厂模式专门创建一个类来创建其他类的实例，被创建的实例通常具有共同的父类。类图如下：</p><img src="image-20220511132031921.png" alt="image-20220511132031921" style="zoom:50%;"><p>优点：将对象的创建和使用分离，把创建产品的过程交给专门的工厂类负责，客户端不用管具体是如何实现的</p><p>缺点：不够灵活，新增一个产品就需要修改工厂类，在工厂中加入必要的业务逻辑，违反了<strong>开闭原则</strong>。</p><h3 id="二、工厂模式"><a href="#二、工厂模式" class="headerlink" title="二、工厂模式"></a>二、工厂模式</h3><p>定义一个用于创建对象的接口，让子类决定实例化哪个类。工厂方法使一个类的实例化延迟到其子类。也就是说：</p><p>把核心工厂变成一个抽象接口，为不同的产品创建不同的子工厂，这样子产品的实例化将在子工厂中完成，如果增加新的产品，则创建新的子工厂即可，不需要修改原来的工厂类。类图如下：</p><p><img src="/2022/05/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/image-20220511133928629.png" alt="image-20220511133928629"></p><h3 id="三、抽象工厂模式"><a href="#三、抽象工厂模式" class="headerlink" title="三、抽象工厂模式"></a>三、抽象工厂模式</h3><p>  是工厂模式的扩展，使得每个子工厂可以创建多个产品，如果只有一个产品体系的话会退化成工厂模式，类图如下：</p><p><img src="/2022/05/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/image-20220511142208829.png" alt="image-20220511142208829"></p><p>缺点：如果需要增加产品体系的话，仍旧需要修改抽象工厂和具体工厂的代码，违反<strong>开闭原则</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 知识积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++八股</title>
      <link href="/2022/05/10/Cplusplus%E5%85%AB%E8%82%A1/"/>
      <url>/2022/05/10/Cplusplus%E5%85%AB%E8%82%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="一、C-和C的区别"><a href="#一、C-和C的区别" class="headerlink" title="一、C++和C的区别"></a>一、C++和C的区别</h3><ol><li>面向过程和面向对象的区别</li><li>关键字不一样</li></ol><h3 id="二、几个关键字"><a href="#二、几个关键字" class="headerlink" title="二、几个关键字"></a>二、几个关键字</h3><ol><li>volatile</li><li>final</li><li>const</li></ol><h3 id="三、三个特性"><a href="#三、三个特性" class="headerlink" title="三、三个特性"></a>三、三个特性</h3><ol><li>封装</li><li>继承</li><li>多态</li></ol>]]></content>
      
      
      <categories>
          
          <category> 知识积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引</title>
      <link href="/2022/05/10/MySQL%E7%B4%A2%E5%BC%95/"/>
      <url>/2022/05/10/MySQL%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一、什么是index"><a href="#一、什么是index" class="headerlink" title="一、什么是index"></a>一、什么是index</h3><ol><li>帮助MySQL提高查询效率的<strong>数据结构</strong></li><li>优点：大大加快数据查询速度</li><li>缺点：①维护索引需要耗费数据库资源；②占用磁盘空间；③对表的数据进行增删改的时候需要维护索引，速度会受到影响。</li></ol><h3 id="二、索引分类"><a href="#二、索引分类" class="headerlink" title="二、索引分类"></a>二、索引分类</h3><ol><li>innoDB<ol><li>主键索引：设置为主键的时候，innodb为<strong>聚簇索引</strong>，不允许有空值</li><li>单值索引/单列索引/普通索引：一个索引只包含单个列，一个表可以有多个单列索引</li><li>唯一索引：索引列的值必须唯一，允许有空值，但是只能有一个null</li><li>复合索引：一个索引包含多个列</li></ol></li><li>myISAM（不需要背）<ol start="5"><li>full text全文索引：在定义索引的列上支持值的全文查找，允许空值、重复值，只能在文本类型就行创建</li></ol></li></ol><h3 id="三、索引的基本操作"><a href="#三、索引的基本操作" class="headerlink" title="三、索引的基本操作"></a>三、索引的基本操作</h3><ol><li><p>创建主键索引，在建表的时候自动创建<code>show index from table</code></p></li><li><p>创建单值索引：</p><ol><li>建表的时候创建：添加<code>key(name)</code>，无法指定索引名字，默认列名为索引名</li><li>建表之后创建：<code>create index [name] on table(name)</code></li></ol></li><li><p>创建唯一索引：</p><ol><li>建表的时候创建：添加<code>unique(name)</code>，无法指定索引名字，默认列名为索引名</li><li>建表之后创建：<code>create unique index [name] on table(name)</code></li></ol></li><li><p>复合索引</p><ol><li><p>建表的时候创建：添加<code>key(name, age)</code>，无法指定索引名字，默认列名为索引名</p></li><li><p>建表之后创建：<code>create unique index [name] on table(name,age)</code></p></li><li><p>Key_name为同一个，都是第一个name</p></li><li><p>利用复合索引需要符合<strong>最左前缀原则</strong>；MySQL会<strong>动态调整字段顺序</strong>以便利用索引</p><img src="image-20220505233324023.png" alt="image-20220505233324023" style="zoom:80%;"></li></ol></li></ol><h3 id="四、innodb引擎底层数据结构"><a href="#四、innodb引擎底层数据结构" class="headerlink" title="四、innodb引擎底层数据结构"></a>四、innodb引擎底层数据结构</h3><p>是B+树，是B树的一种优化</p><ol><li>根据主键索引进行排序，链接起来</li><li>一页16kb，可以存储多个结点</li><li>页目录也是16kb：存储每一页第一个结点的<strong>索引值</strong>和<strong>指针</strong>（指向每一页）</li><li>一般3层就是很庞大的数据量了，约10亿数据量</li><li>根节点常驻内存，一般2<del>4层，最多1</del>3次磁盘IO</li></ol><h3 id="五、B-tree和B-tree的区别："><a href="#五、B-tree和B-tree的区别：" class="headerlink" title="五、B-tree和B+tree的区别："></a>五、B-tree和B+tree的区别：</h3><ol><li>b-tree的每个节点都需要存储完整的数据</li><li>b+tree只有叶子节点存储数据，可以降低树的高度</li></ol><h3 id="六、聚簇索引和非聚簇索引"><a href="#六、聚簇索引和非聚簇索引" class="headerlink" title="六、聚簇索引和非聚簇索引"></a>六、聚簇索引和非聚簇索引</h3><ol><li><p>聚簇索引：将数据存储与索引放到了一起，索引结构的叶子节点保存了行数据。比如主键索引等。</p><ol><li>默认是主键，如果没有主键，则会选择一个唯一且非空的索引代替；</li><li>如果这个索引也没有，innodb会隐式定义一个主键来作为聚簇索引；</li><li>如果已设置了主键为聚簇索引而想要单独设置聚簇索引，必须先删除主键–&gt;添加聚簇索引–&gt;恢复主键。</li></ol></li><li><p>非聚簇索引：将数据与索引分开存储，索引结构的叶子结点指向了数据对应的位置。比如单列索引等</p></li><li><p>特点：①在innodb中，一个表中只能有一个聚簇索引，在聚簇索引上创建的索引称之为辅助索引；②非聚簇索引都是辅助索引，比如单列索引、唯一索引、复合索引。③<strong>辅助索引</strong>的叶子节点存储的不是行的物理位置，而是主键值。④辅助索引访问数据总是需要<strong>二次查找</strong>。</p><img src="image-20220506001614319.png" alt="image-20220506001614319" style="zoom:75%;"></li><li><p>面试题：为什么辅助索引插入的主键值而不是物理位置？因为增删改的时候需要修改地址，如果非聚簇索引存储的地址，会导致在增删改的时候额外修改索引。</p></li></ol><h3 id="七、myISAM的索引：非聚簇索引"><a href="#七、myISAM的索引：非聚簇索引" class="headerlink" title="七、myISAM的索引：非聚簇索引"></a>七、myISAM的索引：非聚簇索引</h3><img src="image-20220506002554510.png" alt="image-20220506002554510" style="zoom:75%;">]]></content>
      
      
      <categories>
          
          <category> 知识积累 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
